!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("typedarray-to-buffer"),require("atob")):"function"==typeof define&&define.amd?define(["typedarray-to-buffer","atob"],t):(e||self).canvasToBuffer=t(e.typedarrayToBuffer,e.atob)}(this,function(e,t){function n(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var a,i=/*#__PURE__*/n(e),o=/*#__PURE__*/n(t),r="undefined"!=typeof document&&"function"==typeof document.createElement;return function(e,t){void 0===t&&(t={});var n=this;if(t.image=t.image?t.image:{},t.image.types=t.image.types?t.image.types:[],t.image.types.length>2)throw new Error("Too many image types are specified!");t.image.types.length<1&&(t.image.types=r?["webp","jpeg"]:["png"]),t.image.quality||(t.image.quality=.5);var u=parseFloat(t.image.quality);function f(e){var n;return t.image.types[e]&&(n="image/"+t.image.types[e]),n}function c(e,n){var a=e&&e.match(n);return a&&t.debug&&t.debug("Image type %s verified",n),a}function l(){var t;return r?(t=document.createElement("canvas")).width=t.height=1:t=e,t}function g(e,t){try{l().toDataURL(e,function(n,a){n?t(n):t(null,c(a,e))})}catch(e){t(null,!1)}}function y(e){var n;try{var a=l();n=c(a.toDataURL&&a.toDataURL(e),e)}catch(n){t.debug&&t.logger.debug("Failed to call toDataURL() on canvas for image type %s",e)}return n}function p(e){var n=f(0);if(!e)return function(e){return y(e)||t.image.types[1]&&y(e=f(1))||(e=null),!e&&t.debug&&t.logger.debug("Unable to verify image type"),e}(n);!function(e,t){g(e,function(n,a){n?t(n):a?t(null,e):g(e=f(1),function(n,a){n?t(n):t(null,a?e:null)})})}(n,e)}function d(e){var t,a=e.split(",")[1];if("function"==typeof o.default)t=o.default(a);else{if("function"!=typeof n.constructor.atob)throw new Error("atob function is missing");t=n.constructor.atob(a)}for(var r=new Uint8Array(t.length),u=0,f=t.length;u<f;u++)r[u]=t.charCodeAt(u);return i.default(r)}this.toBuffer=function(t){if(!t)return(i=n.getImageType())&&(a=d(e.toDataURL(i,u))),a;var a,i;!function(t){n.getImageType(function(n,a){n?t(n):a?e.toDataURL(a,function(e,n){e?t(e):t(null,d(n))}):t()})}(t)},this.getImageType=function(e){if(!e)return a&&r||(a=p()),a;a&&r?e(null,a):p(function(t,n){t?e(t):e(null,a=n)})}}});
//# sourceMappingURL=canvas-to-buffer.umd.js.map
