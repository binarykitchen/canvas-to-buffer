import t from"typedarray-to-buffer";const e="undefined"!=typeof document&&"function"==typeof document.createElement,i=e?["webp","jpeg"]:["png"];let s;class r{constructor(t,e=i,s=.5){if(this.quality=void 0,this.types=void 0,this.canvas=void 0,e.length>2)throw new Error("Too many image types are specified!");this.canvas=t,this.quality=s,this.types=e}composeMimeType(t){let e;return this.types[t]&&(e="image/"+this.types[t]),e}isMatch(t,e){return t.match(e)}getTestCanvas(){let t;return e?(t=document.createElement("canvas"),t.width=t.height=1):t=this.canvas,t}canvasSupportsMimeType(t){try{const e=this.getTestCanvas(),i=e.toDataURL&&e.toDataURL(t);return this.isMatch(i,t)}catch(t){return!1}}figureMimeType(){let t=this.composeMimeType(0);return t&&this.canvasSupportsMimeType(t)||(this.types[1]?(t=this.composeMimeType(1),t&&!this.canvasSupportsMimeType(t)&&(t=void 0)):t=void 0),t}uriToBuffer(i){const s=i.split(",")[1];let o;if(!s)throw new Error("Empty uri string given!");if(o=e?window.atob(s):null==r.atob?void 0:r.atob(s),!o)throw new Error("Byte are empty, something within atob went wrong.");const n=new Uint8Array(o.length);for(let t=0,e=o.length;t<e;t++)n[t]=o.charCodeAt(t);return t(n)}toBuffer(){const t=this.getMimeType();let e;if(t){const i=this.canvas.toDataURL(t,this.quality);e=this.uriToBuffer(i)}return e}getMimeType(){return s&&e||(s=this.figureMimeType()),s}}r.atob=void 0;export{r as default};
//# sourceMappingURL=canvas-to-buffer.modern.js.map
